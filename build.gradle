plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '6.0.17'
    id 'org.owasp.dependencycheck' version '9.2.0'
}

group = 'com.mechsim'
version = '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def javafxVersion = '21.0.1'
def platform = System.getProperty("os.name").toLowerCase().with {
    if (contains("win")) "win"
    else if (contains("mac")) "mac"
    else if (contains("nux")) "linux"
    else throw new GradleException("Unsupported OS: $it")
}

repositories {
    mavenCentral()
}

configurations {
    javafx {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    // JavaFX dependencies
    def javafxModules = ['base', 'controls', 'fxml', 'graphics']
    javafxModules.each { module ->
        javafx "org.openjfx:javafx-${module}:${javafxVersion}:${platform}"
        implementation "org.openjfx:javafx-${module}:${javafxVersion}:${platform}"
    }

    // Testing
    testImplementation(enforcedPlatform('org.junit:junit-bom:5.10.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // UI Testing for JavaFX
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    //testImplementation 'org.testfx:openjfx-monocle:jdk-21.0.2+1'

// Optional: Mockito for mocking
    testImplementation 'org.mockito:mockito-core:5.11.0'
// Optional: AssertJ for fluent assertions
    testImplementation 'org.assertj:assertj-core:3.26.0'

// SpotBugs Annotations (optional, for advanced static analysis)
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.3'
}

application {
    mainClass = 'com.mechsim.Main'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

checkstyle {
    toolVersion = '10.12.2'
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files("$rootDir/config/pmd/pmd-ruleset.xml")
    ruleSets = []
}

spotbugs {
    toolVersion = '4.8.3'
    effort = com.github.spotbugs.snom.Effort.MAX
}
tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        html.required = true
        xml.required = false
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
    suppressionFile = "$rootDir/config/owasp/suppressions.xml" // Optional, for custom suppressions
    analyzers {
        assemblyEnabled = false
    }
}

// Configure JavaFX module path for both compilation and runtime
def javaFxOptions = {
    it.options.compilerArgs += [
            '--module-path', configurations.javafx.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

tasks.withType(JavaCompile).configureEach {
    doFirst(javaFxOptions)
}

tasks.named('run') {
    doFirst {
        jvmArgs = [
                '--module-path', configurations.javafx.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}